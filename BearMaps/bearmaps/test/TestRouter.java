package bearmaps.test;

import bearmaps.AugmentedStreetMapGraph;
import org.junit.Before;
import org.junit.Test;
import bearmaps.Router;

import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

/** Test of the routing part of the assignment. */
public class TestRouter {
    private static final String PARAMS_FILE = "../library-su19/data/proj3_test_inputs/path_params.txt";
    private static final String RESULTS_FILE = "../library-su19/data/proj3_test_inputs/path_results.txt";
    private static final int NUM_TESTS = 8;
    private static final String OSM_DB_PATH = "../library-su19/data/proj3_xml/berkeley-2019.osm.xml";
    private static AugmentedStreetMapGraph graph;
    private static boolean initialized = false;

    @Before
    public void setUp() throws Exception {
        if (initialized) {
            return;
        }
        graph = new AugmentedStreetMapGraph(OSM_DB_PATH);
        initialized = true;

    }

    @Test
    public void testShortestPath() throws Exception {
        List<Map<String, Double>> testParams = paramsFromFile();
        List<List<Long>> expectedResults = resultsFromFile();

        for (int i = 0; i < NUM_TESTS; i++) {
            System.out.println(String.format("Running test: %d", i));
            Map<String, Double> params = testParams.get(i);
            List<Long> actual = Router.shortestPath(graph,
                    params.get("start_lon"), params.get("start_lat"),
                    params.get("end_lon"), params.get("end_lat"));
            List<Long> expected = expectedResults.get(i);
            assertEquals("Your results did not match the expected results", expected, actual);
        }
    }

    @Test
    public void testShortestPath5() throws Exception {
//        {end_lat=37.87670021935686, start_lon=-122.25100180658397, start_lat=37.85972610508424, end_lon=-122.28555792026536}.
        List<Long> actual = Router.shortestPath(graph,
                -122.25100180658397, 37.85972610508424,
                -122.28555792026536, 37.87670021935686);
        System.out.println("5");
    }

    @Test
    public void testShortestPath9() throws Exception {
//        {end_lat=37.83754390272127, start_lon=-122.26873380079516, start_lat=37.87412647477072, end_lon=-122.22649453655397}.
        List<Long> actual = Router.shortestPath(graph,
                -122.26873380079516, 37.87412647477072,
                -122.22649453655397, 37.83754390272127);
        String expect = "4192702906, 4238979923, 239616965, 53055193, 4238979922, 2967316061, 5398143098, 2504233790, 2967311417, 4238979925, 53055194, 4168189959, 2196215622, 53055195, 2196215626, 4168189960, 241887518, 53055198, 4188788161, 249237367, 4294292311, 231027846, 249237373, 4168189962, 231027848, 2327822404, 2327822491, 237133520, 5398143101, 53055200, 237133534, 237133573, 4188788113, 53055202, 4188788149, 4378664131, 4294455590, 318886234, 370472947, 4188788156, 52980624, 4188788137, 560215250, 1333176981, 5398143104, 260908830, 4294455598, 53021369, 4294455596, 260908839, 1333177008, 59805926, 270623155, 1333177006, 270623156, 59805929, 270623152, 1419636809, 462762669, 53090142, 4301522629, 5050642403, 4333613310, 260544553, 4301522660, 53121161, 286633210, 462762995, 260544552, 260544551, 260544550, 53121159, 4303570256, 53034977, 4303570245, 286079887, 53055608, 53055610, 53055611, 53011953, 3647671497, 3647671495, 3647671488, 3647671483, 267631985, 4333613307, 59805932, 3176146682, 267631988, 59805923, 267631983, 3176146687, 3647671451, 260913656, 4333613302, 53055616, 4333613297, 2308655608, 275809876, 53055618, 4333613292, 2252623360, 267631981, 53055620, 4333613289, 267631975, 4333613085, 267631974, 2252597634, 3652928279, 3652928303, 3652928302, 3652928301, 3652928300, 3652928299, 3652928298, 56819292, 3652928297, 3652928296, 3652928295, 3652928294, 3652928293, 56819279, 2252597613, 275809625, 275809624, 4927407473, 267631971, 4333613076, 53041099, 267631970, 56819231, 267631969, 267631968, 4333613071, 56819247, 4333613067, 53020993, 4333613061, 394216351, 56819253, 394216352, 53058934, 394216371, 267631967, 696215423, 53058936, 4333613055, 394180802, 1419660772, 267632093, 267632092, 4330828811, 267632091, 267632090, 53092735, 1419661068, 4330828813, 53111879, 4330828815, 1419660793, 53111880, 394180763, 394180764, 4330828814, 53081908, 267632051, 843009175, 394180759, 267632052, 53082163, 394180756, 57059663, 394180757, 394180758, 57059669, 4330828790, 53154694, 4330828685, 394180751, 4330828682, 53082603, 4330828675, 394180597, 267632056, 2844599474, 53152991, 2844599473, 394180418, 4330828671, 4330828668, 4330828666, 4330828664, 4330828662, 2844485696, 394180316, 267632101, 4330828663, 53060402, 4330828659, 1214221907, 1214221837, 53088582, 394179841, 394179843, 1214221905, 394179845, 1214221877, 53088583, 1214221916, 53088585, 1214221839, 514117760, 53047456, 1214221835, 514117761, 3964998892, 1214221880, 1214221913, 1214221851, 53031582, 1214221859, 394179290, 1214221845, 1214221846, 267632138, 1214221898, 1214221861, 267632134, 1214221870, 1214221893, 5106682771, 267632129, 267632124, 5106682772, 53086332, 1214221831, 394179285, 5106682762, 394179286, 5106682763, 53088590, 92773076, 1214221918, 53088592, 1214221921, 92760750, 1214221852, 266432737, 394179287, 1214221836, 1993242868, 1993242862, 394179288, 1993242860, 1214221902, 661769698, 266432685, 1214221850, 92760756, 1214221867, 1214221892, 53049931, 1214221922, 266432649, 1214221875, 53088594, 266432636, 1214221882, 5105399999, 5105400000, 92760845, 5105400001, 53088596, 1862638795, 5105400016, 5271588059, 2391023590, 1376737833, 2391023589, 258773464, 5105400008, 5105400009, 5105400010, 5105400011, 5105400012, 5105400013, 258773467, 5105400014, 92758158, 1214168891, 5271588047, 93201403, 1376737832, 5271588060, 1376737830, 93201412, 1212646210, 93201420, 93201430, 93201588, 258773573, 93201452, 258773554, 271854860, 93201458, 93201468, 93201479, 271854862, 93201488, 93201498, 93201591, 271854851, 93201506, 1211736975, 93201518, 93201580, 553988162, 93201530, 93201539, 93201552, 4168995777, 93201573, 201581448, 1212905351, 201581446, 3971603157, 3971602156, 201581443, 1212905304, 1212905370, 553985466, 1212905349, 2391023545, 200327460, 256544387, 201585141, 553985355, 200327462, 201585145, 553985367, 53024899, 1212905356, 201893664, 553985377, 1212905285, 201893665, 265519816, 201585148, 244468606, 1212905295, 53024901, 265519857, 2402257532, 2402257537, 53083133, 2402257525, 2402257539, 200444846, 244468999, 200444848, 244469000, 53032027, 53032037, 558297760, 206052611, 206052612, 206052613, 206052614, 206052615, 244468615, 206052616, 244468653, 206052617, 206052618, 206052619, 53115146, 53042273, 956504902, 53042275, 956504898, 956504897, 244988125";
        String[] expected = expect.split(", ");
        String expect2 = "4192702906, 4238979923, 239616965, 53055193, 4238979922, 2967316061, 5398143098, 2504233790, 2967311417, 4238979925, 53055194, 4168189959, 2196215622, 53055195, 2196215626, 4168189960, 241887518, 53055198, 4188788161, 249237367, 4294292311, 231027846, 249237373, 4168189962, 231027848, 2327822404, 2327822491, 237133520, 5398143101, 53055200, 237133534, 237133573, 4188788113, 53055202, 4188788149, 4378664131, 4294455590, 318886234, 370472947, 4188788156, 52980624, 4188788137, 560215250, 1333176981, 5398143104, 260908830, 4294455598, 53021369, 4294455596, 260908839, 1333177008, 59805926, 270623155, 1333177006, 270623156, 59805929, 270623152, 1419636809, 462762669, 53090142, 4301522629, 5050642403, 4333613310, 260544553, 4301522660, 53121161, 286633210, 462762995, 260544552, 260544551, 260544550, 53121159, 4303570256, 53034977, 4303570245, 286079887, 53055608, 53055610, 53055611, 53011953, 3647671497, 3647671495, 3647671488, 3647671483, 267631985, 4333613307, 59805932, 3176146682, 267631988, 59805923, 267631983, 3176146687, 3647671451, 260913656, 4333613302, 53055616, 4333613297, 2308655608, 275809876, 53055618, 4333613292, 2252623360, 267631981, 53055620, 4333613289, 267631975, 4333613085, 267631974, 2252597634, 3652928279, 3652928303, 3652928302, 3652928301, 3652928300, 3652928299, 3652928298, 56819292, 3652928297, 3652928296, 3652928295, 3652928294, 3652928293, 56819279, 2252597613, 275809625, 275809624, 4927407473, 267631971, 4333613076, 53041099, 267631970, 56819231, 267631969, 267631968, 4333613071, 56819247, 4333613067, 53020993, 4333613061, 394216351, 56819253, 394216352, 53058934, 394216371, 267631967, 696215423, 53058936, 4333613055, 394180802, 1419660772, 267632093, 267632092, 4330828811, 267632091, 267632090, 53092735, 1419661068, 4330828813, 53111879, 4330828815, 1419660793, 53111880, 394180763, 394180764, 4330828814, 53081908, 267632051, 843009175, 394180759, 267632052, 53082163, 394180756, 57059663, 394180757, 394180758, 57059669, 4330828790, 53154694, 4330828685, 394180751, 4330828682, 53082603, 4330828675, 394180597, 267632056, 2844599474, 53152991, 2844599473, 394180418, 4330828671, 4330828668, 4330828666, 4330828664, 4330828662, 2844485696, 394180316, 267632101, 4330828663, 53060402, 4330828659, 1214221907, 1214221837, 53088582, 394179841, 394179843, 1214221905, 394179845, 1214221877, 53088583, 1214221916, 53088585, 1214221839, 514117760, 53047456, 1214221835, 514117761, 3964998892, 1214221880, 1214221913, 1214221851, 53031582, 1214221859, 394179290, 1214221845, 1214221846, 267632138, 1214221898, 1214221861, 267632134, 1214221870, 1214221893, 5106682771, 267632129, 267632124, 5106682772, 53086332, 1214221831, 394179285, 5106682762, 394179286, 5106682763, 53088590, 92773076, 1214221918, 53088592, 1214221921, 92760750, 1214221852, 266432737, 394179287, 1214221836, 1993242868, 1993242862, 394179288, 1993242860, 1214221902, 661769698, 266432685, 1214221850, 92760756, 1214221867, 1214221892, 53049931, 1214221922, 266432649, 1214221875, 53088594, 266432636, 1214221882, 5105399999, 5105400000, 92760845, 5105400001, 53088596, 1862638795, 5105400016, 5271588059, 2391023590, 1376737833, 2391023589, 258773464, 5105400008, 5105400009, 5105400010, 5105400011, 5105400012, 5105400013, 258773467, 5105400014, 92758158, 1214168891, 5271588047, 93201403, 1376737832, 5271588060, 1376737830, 93201412, 1212646210, 93201420, 93201430, 93201588, 258773573, 93201452, 258773554, 271854860, 93201458, 93201468, 93201479, 271854862, 93201488, 93201498, 93201591, 271854851, 93201506, 1211736975, 93201518, 93201580, 553988162, 93201530, 93201539, 93201552, 4168995777, 93201573, 201581448, 1212905351, 201581446, 3971603157, 3971602156, 201581443, 1212905304, 1212905370, 553985466, 1212905349, 2391023545, 200327460, 256544387, 201585141, 553985355, 200327462, 201585145, 553985367, 53024899, 1212905356, 201893664, 553985377, 1212905285, 201893665, 265519816, 201585148, 244468606, 1212905295, 53024901, 265519857, 2402257532, 2402257537, 53083133, 2402257525, 2402257539, 200444846, 244468999, 200444848, 244469000, 53032027, 53032037, 558297760, 206052611, 206052612, 206052613, 206052614, 206052615, 244468615, 206052616, 244468653, 206052617, 206052618, 206052619, 53115146, 53042273, 956504902, 53042275, 956504898, 956504897, 244988125";
        String[] expected2 = expect2.split(", ");
        for (int i = 0; i < actual.size(); i++) {
            System.out.println(i);
            assertEquals(actual.get(i).toString(), expected2[i]);
        }
        System.out.println("9");
    }

    @Test
    public void testShortestPath3_1340() throws Exception {
//        {end_lat=37.85875213996462, start_lon=-122.21344571770709, start_lat=37.829978240376484, end_lon=-122.2739648070287}.
        List<Long> actual = Router.shortestPath(graph,
                -122.21344571770709, 37.829978240376484,
                -122.2739648070287, 37.85875213996462);
        String expect = "1332113172, 1332113213, 1332113155, 1332113214, 204813042, 204813040, 1332113190, 1332113216, 204813039, 661853866, 1332113158, 1332113218, 1332113153, 661850986, 1332113134, 1332113116, 661850988, 204491373, 661847915, 661847917, 204496636, 661847921, 1212713897, 204496637, 204496639, 204495228, 661842708, 1212611248, 53065851, 1212610898, 522277694, 1212610862, 53065850, 1212610831, 1211727529, 522277675, 1212726520, 52991608, 1212726527, 522276829, 1212726522, 522276830, 1212726521, 1211727492, 1212673914, 1212673913, 1211727559, 52991613, 53065846, 1211727533, 271854846, 553987510, 271854845, 93201320, 93201323, 1211727497, 1211727574, 93201327, 271854853, 1211727535, 271854855, 271854856, 93201333, 93201344, 93201355, 93201361, 258773501, 93201371, 258773498, 93201313, 52984624, 202137399, 53016567, 1212646337, 93201237, 258773470, 5271588057, 3971603158, 258770135, 5105400816, 258773469, 5271588048, 1214168891, 92758158, 5105400014, 258773467, 5105400013, 5105400012, 5105400011, 5105400010, 5105400009, 5105400008, 258773464, 2391023589, 1376737833, 2391023590, 5271588059, 5105400016, 1862638795, 53088596, 5105400001, 92760845, 5105400000, 5105399999, 1214221882, 266432636, 53088594, 1214221875, 266432649, 1214221922, 53049931, 1214221892, 1214221867, 92760756, 1214221850, 266432685, 661769698, 1214221902, 1993242860, 394179288, 1993242862, 1993242868, 1214221836, 394179287, 266432737, 1214221852, 92760750, 1214221921, 53088592, 1214221918, 92773076, 53088590, 5106682763, 394179286, 5106682762, 394179285, 1214221831, 53086332, 5106682772, 267632124, 267632129, 5106682771, 1214221893, 1214221870, 267632134, 1214221861, 1214221898, 267632138, 1214221846, 1214221845, 394179290, 1214221859, 53031582, 1214221851, 1214221913, 1214221880, 3964998892, 514117761, 1214221835, 53047456, 514117760, 1214221839, 53088585, 1214221916, 53088583, 1214221877, 394179845, 1214221905, 394179843, 394179841, 53088582, 1214221837, 1214221907, 4330828659, 53060402, 4330828663, 267632101, 394180316, 2844485696, 4330828662, 4330828661, 53117335, 4330828660, 4330828658, 53117332, 53109996, 53117328, 4330828655, 53083891, 53091414, 267632064, 4330828653, 53055675, 4330828652, 267632063, 53027218, 53027215, 267632071, 267632074, 444644320, 4210484515, 53090683, 4210484544, 4283824369, 53100520, 4283824368, 4283824366, 53103284, 4283824365, 4283824363, 53070391, 4283824362, 4169483035, 4283824360, 53045590, 53117318, 2377496589, 4283824374, 53082591, 4265656906, 53082589, 312432770, 4265656905, 1762740619, 1762740617, 1762740620, 1762740622, 1762740625, 5049820839, 1762740624, 1762740626, 4265656913, 53064684, 4265656914, 4265656911, 53064683, 4265656912, 1762740627, 1762740630, 1762740629, 1762740628, 1762740631, 1762740633, 1762740637, 1762740636, 3905311456, 3905311452, 2086760865, 53037909, 2086760870, 2086696624, 53037907, 275782472, 370473556, 2086667342, 3248180214, 370473555, 370473554, 370473553, 370473552, 370473574, 4250075553, 53037905, 3248180213, 283296850, 4235130307, 53037903, 4235130308, 283296881, 4235130305, 53037901, 4235130310, 53129613, 4235130311";
        String but = "1332113172, 1332113213, 1332113155, 1332113214, 204813042, 204813040, 1332113190, 1332113216, 204813039, 661853866, 1332113158, 1332113218, 1332113153, 661850986, 1332113134, 1332113116, 661850988, 204491373, 661847915, 661847917, 204496636, 661847921, 1212713897, 204496637, 204496639, 204495228, 661842708, 1212611248, 53065851, 1212610898, 522277694, 1212610862, 53065850, 1212610831, 1211727529, 522277675, 1212726520, 52991608, 1212726527, 522276829, 1212726522, 522276830, 1212726521, 1211727492, 1212673914, 1212673913, 1211727559, 52991613, 53065846, 1211727533, 271854846, 553987510, 271854845, 93201320, 93201323, 1211727497, 1211727574, 93201327, 271854853, 1211727535, 271854855, 271854856, 93201333, 93201344, 93201355, 93201361, 258773501, 93201371, 258773498, 93201313, 52984624, 202137399, 53016567, 1212646337, 93201237, 258773470, 5271588057, 3971603158, 258770135, 5105400816, 258773469, 5271588048, 1214168891, 92758158, 5105400014, 258773467, 5105400013, 5105400012, 5105400011, 5105400010, 5105400009, 5105400008, 258773464, 2391023589, 1376737833, 2391023590, 5271588059, 5105400016, 1862638795, 53088596, 5105400001, 92760845, 5105400000, 5105399999, 1214221882, 266432636, 53088594, 1214221875, 266432649, 1214221922, 53049931, 1214221892, 1214221867, 92760756, 1214221850, 266432685, 661769698, 1214221902, 1993242860, 394179288, 1993242862, 1993242868, 1214221836, 394179287, 266432737, 1214221852, 92760750, 1214221921, 53088592, 1214221918, 92773076, 53088590, 5106682763, 394179286, 5106682762, 394179285, 1214221831, 53086332, 5106682772, 267632124, 267632129, 5106682771, 1214221893, 1214221870, 267632134, 1214221861, 1214221898, 267632138, 1214221846, 1214221845, 394179290, 1214221859, 53031582, 1214221851, 1214221913, 1214221880, 3964998892, 514117761, 1214221835, 53047456, 514117760, 1214221839, 53088585, 1214221916, 53088583, 1214221877, 394179845, 1214221905, 394179843, 394179841, 53088582, 1214221837, 1214221907, 4330828659, 53060402, 4330828663, 267632101, 394180316, 2844485696, 4330828662, 4330828661, 53117335, 4330828660, 4330828658, 53117332, 53109996, 53117328, 4330828655, 53083891, 53091414, 267632064, 4330828653, 53055675, 4330828652, 267632063, 53027218, 53027215, 267632071, 267632074, 444644320, 4210484515, 53090683, 4210484544, 4283824369, 53100520, 4283824368, 4283824366, 53103284, 4283824365, 4283824363, 53070391, 4283824362, 4169483035, 4283824360, 53045590, 53117318, 2377496589, 4283824374, 53082591, 4265656906, 53082589, 312432770, 4265656905, 1762740619, 1762740617, 1762740620, 1762740622, 1762740625, 5049820839, 1762740624, 1762740626, 4265656913, 53064684, 4265656914, 4265656911, 53064683, 4265656912, 1762740627, 1762740630, 1762740629, 1762740628, 1762740631, 1762740633, 1762740637, 1762740636, 3905311456, 3905311452, 2086760865, 53037909, 2086760870, 2086696624, 53037907, 275782472, 370473556, 2086667342, 3248180214, 370473555, 370473554, 370473553, 370473552, 370473574, 4250075553, 53037905, 53122855, 4250075558, 3248180219, 825409990, 283296894, 4235130315, 53129615, 4235130316, 283296903, 4235130312, 53129613, 4235130311]";
        String[] expected = expect.split(", ");
        String[] butWas = but.split(", ");
        for (int i = 0; i < actual.size(); i++) {
            System.out.println(i);
            assertEquals(actual.get(i).toString(), expected[i]);
        }
    }

    @Test
    public void testShortestPath11_1440() throws Exception {
//        {end_lat=37.82933178692575, start_lon=-122.2650253793309, start_lat=37.88565760080601, end_lon=-122.22773342055447}
        List<Long> actual = Router.shortestPath(graph,
                -122.2650253793309, 37.88565760080601,
                -122.22773342055447, 37.82933178692575);
        String expect = "53056545, 262084679, 262084678, 440602820, 262251117, 53056546, 262251118, 262251116, 262251119, 262251115, 2010173278, 53056547, 53082169, 53082211, 414247032, 414246942, 414246849, 53146430, 2976013638, 53149260, 4294292350, 59794830, 53059195, 53059197, 2297686121, 4294292341, 53059198, 4294292338, 2297686118, 53059199, 4616420905, 532751352, 339928551, 2010214253, 239511776, 2010214244, 4294292314, 249237225, 2010214256, 249237252, 2010214233, 59794894, 59794897, 2010214243, 2298138620, 1954704142, 4294292316, 53148316, 4294292317, 318886232, 370472946, 4294455604, 53148317, 4294455605, 555960902, 555961663, 4294455608, 53021367, 4294455607, 555960513, 1333176944, 260551692, 1333176988, 4294455601, 53021369, 4294455596, 260908839, 1333177008, 59805926, 270623155, 1333177006, 270623156, 59805929, 270623152, 1419636809, 462762669, 53090142, 4301522629, 5050642403, 4333613310, 260544553, 4301522660, 53121161, 286633210, 462762995, 260544552, 260544551, 260544550, 53121159, 4303570256, 53034977, 4303570245, 286079887, 53055608, 53055610, 53055611, 53011953, 3647671497, 3647671495, 3647671488, 3647671483, 267631985, 4333613307, 59805932, 3176146682, 267631988, 59805923, 267631983, 3176146687, 3647671451, 260913656, 4333613302, 53055616, 4333613297, 2308655608, 275809876, 53055618, 4333613292, 2252623360, 267631981, 53055620, 4333613289, 267631975, 4333613085, 267631974, 2252597634, 3652928279, 3652928303, 3652928302, 3652928301, 3652928300, 3652928299, 3652928298, 56819292, 3652928297, 3652928296, 3652928295, 3652928294, 3652928293, 56819279, 2252597613, 275809625, 275809624, 4927407473, 267631971, 4333613076, 53041099, 267631970, 56819231, 267631969, 267631968, 4333613071, 56819247, 4333613067, 53020993, 4333613061, 394216351, 56819253, 394216352, 53058934, 394216371, 267631967, 696215423, 53058936, 4333613055, 394180802, 1419660772, 267632093, 267632092, 4330828811, 267632091, 267632090, 53092735, 1419661068, 4330828813, 53111879, 4330828815, 1419660793, 53111880, 394180763, 394180764, 4330828814, 53081908, 267632051, 843009175, 394180759, 267632052, 53082163, 394180756, 57059663, 394180757, 394180758, 57059669, 4330828790, 53154694, 4330828685, 394180751, 4330828682, 53082603, 4330828675, 394180597, 267632056, 2844599474, 53152991, 2844599473, 394180418, 4330828671, 4330828668, 4330828666, 4330828664, 4330828662, 2844485696, 394180316, 267632101, 4330828663, 53060402, 4330828659, 1214221907, 1214221837, 53088582, 394179841, 394179843, 1214221905, 394179845, 1214221877, 53088583, 1214221916, 53088585, 1214221839, 514117760, 53047456, 1214221835, 514117761, 3964998892, 1214221880, 1214221913, 1214221851, 53031582, 1214221859, 394179290, 1214221845, 1214221846, 267632138, 1214221898, 1214221861, 267632134, 1214221870, 1214221893, 5106682771, 267632129, 267632124, 5106682772, 53086332, 1214221831, 394179285, 5106682762, 394179286, 5106682763, 53088590, 92773076, 1214221918, 53088592, 1214221921, 92760750, 1214221852, 266432737, 394179287, 1214221836, 1993242868, 1993242862, 394179288, 1993242860, 1214221902, 661769698, 266432685, 1214221850, 92760756, 1214221867, 1214221892, 53049931, 1214221922, 266432649, 1214221875, 53088594, 266432636, 1214221882, 5105399999, 5105400000, 92760845, 5105400001, 53088596, 1862638795, 5105400016, 5271588059, 2391023590, 1376737833, 2391023589, 258773464, 5105400008, 5105400009, 5105400010, 5105400011, 5105400012, 5105400013, 258773467, 5105400014, 92758158, 1214168891, 5271588047, 93201403, 1376737832, 5271588060, 1376737830, 93201412, 1212646210, 93201420, 93201430, 93201588, 258773573, 93201452, 258773554, 271854860, 93201458, 93201468, 93201479, 271854862, 93201488, 93201498, 93201591, 271854851, 93201506, 1211736975, 93201518, 93201580, 553988162, 93201530, 93201539, 93201552, 4168995777, 93201573, 1211736999, 1211737017, 1211736986, 1211736977, 522277710, 1211737015, 1211737003, 1211737005, 1212673912, 1212673911, 201576889, 1211736988, 1212726524, 1212713064, 1212726526, 201576284, 1212726525, 956454315, 1212726523, 1212713066, 1212713059, 201576285, 1212713055, 1212713058, 1212713056, 1212713054, 661842696, 1332113162, 1212713060, 1332113144, 1212713068, 661842579, 1212611061, 661841680, 204486285, 1734276548, 1734276550, 1734276552, 1734276553, 1734276549, 1734276546, 1734276545, 1734276547, 204816201, 3420932299, 3420932300, 3420932301, 3420932302, 3420932303, 956504819, 53027897, 53086058, 245115758, 245115759, 245115760, 245115761, 245115763, 245115764, 245115325, 245115326, 245115327, 245115328, 256543016, 256543017, 256543018, 256543019, 370464695, 256543020, 956504870, 256543021, 956504877, 256543022, 256543023, 256543024, 956504881, 956504884, 256542898, 2672282131, 256543149, 53149965, 256542899, 956500322, 53119040, 956500323, 683050100, 683050101, 53149962";
        String but = "53056545, 262084679, 262084678, 440602820, 262251117, 53056546, 262251118, 262251116, 262251119, 262251115, 2010173278, 53056547, 53082169, 53082211, 414247032, 414246942, 414246849, 53146430, 2976013638, 53149260, 4294292350, 59794830, 53059195, 53059197, 2297686121, 4294292341, 53059198, 4294292338, 2297686118, 53059199, 4616420905, 532751352, 339928551, 2010214253, 239511776, 2010214244, 4294292314, 249237225, 2010214256, 249237252, 2010214233, 59794894, 59794897, 2010214243, 2298138620, 1954704142, 4294292316, 53148316, 4294292317, 318886232, 370472946, 4294455604, 53148317, 4294455605, 555960902, 555961663, 4294455608, 53021367, 4294455607, 555960513, 1333176944, 260551692, 1333176988, 4294455601, 53021369, 4294455596, 260908839, 1333177008, 59805926, 270623155, 1333177006, 270623156, 59805929, 270623152, 1419636809, 462762669, 53090142, 4301522629, 5050642403, 4333613310, 260544553, 4301522660, 53121161, 286633210, 462762995, 260544552, 260544551, 260544550, 53121159, 4303570256, 53034977, 4303570245, 286079887, 53055608, 53055610, 53055611, 53011953, 3647671497, 3647671495, 3647671488, 3647671483, 267631985, 4333613307, 59805932, 3176146682, 267631988, 59805923, 267631983, 3176146687, 3647671451, 260913656, 4333613302, 53055616, 4333613297, 2308655608, 275809876, 53055618, 4333613292, 2252623360, 267631981, 53055620, 4333613289, 267631975, 4333613085, 267631974, 2252597634, 3652928279, 3652928303, 3652928302, 3652928301, 3652928300, 3652928299, 3652928298, 56819292, 3652928297, 3652928296, 3652928295, 3652928294, 3652928293, 56819279, 2252597613, 275809625, 275809624, 4927407473, 267631971, 4333613076, 53041099, 267631970, 56819231, 267631969, 267631968, 4333613071, 56819247, 4333613067, 53020993, 4333613061, 394216351, 56819253, 394216352, 53058934, 394216371, 267631967, 696215423, 53058936, 4333613055, 394180802, 1419660772, 267632093, 267632092, 4330828811, 267632091, 267632090, 53092735, 1419661068, 4330828813, 53111879, 4330828815, 1419660793, 53111880, 394180763, 394180764, 4330828814, 53081908, 267632051, 843009175, 394180759, 267632052, 53082163, 394180756, 57059663, 394180757, 394180758, 57059669, 4330828790, 53154694, 4330828685, 394180751, 4330828682, 53082603, 4330828675, 394180597, 267632056, 2844599474, 53152991, 2844599473, 394180418, 4330828671, 4330828668, 4330828666, 4330828664, 4330828662, 2844485696, 394180316, 267632101, 4330828663, 53060402, 4330828659, 1214221907, 1214221837, 53088582, 394179841, 394179843, 1214221905, 394179845, 1214221877, 53088583, 1214221916, 53088585, 1214221839, 514117760, 53047456, 1214221835, 514117761, 3964998892, 1214221880, 1214221913, 1214221851, 53031582, 1214221859, 394179290, 1214221845, 1214221846, 267632138, 1214221898, 1214221861, 267632134, 1214221870, 1214221893, 5106682771, 267632129, 267632124, 5106682772, 53086332, 1214221831, 394179285, 5106682762, 394179286, 5106682763, 53088590, 92773076, 1214221918, 53088592, 1214221921, 92760750, 1214221852, 266432737, 394179287, 1214221836, 1993242868, 1993242862, 394179288, 1993242860, 1214221902, 661769698, 266432685, 1214221850, 92760756, 1214221867, 1214221892, 53049931, 1214221922, 266432649, 1214221875, 53088594, 266432636, 1214221882, 5105399999, 5105400000, 92760845, 5105400001, 53088596, 1862638795, 5105400016, 5271588059, 2391023590, 1376737833, 2391023589, 258773464, 5105400008, 5105400009, 5105400010, 5105400011, 5105400012, 5105400013, 258773467, 5105400014, 92758158, 1214168904, 92758163, 5105400730, 5105400745, 5105400727, 266432334, 5105400732, 5105400729, 5105400731, 266432487, 1214168884, 5271588054, 5105400813, 5105400775, 5105400776, 5271588056, 5271588053, 5105400778, 5105400779, 5105400787, 5105400780, 5105400786, 5105400781, 5105400782, 5105400785, 5105400783, 5271588055, 5105400784, 258773585, 200308586, 271854834, 5042560537, 53043341, 266426003, 219657140, 80536333, 305844627, 305844624, 80536320, 266425911, 53043340, 266425910, 266425909, 93203062, 52987422, 266425787, 80535753, 967671394, 266425772, 266425771, 53007122, 462741438, 266425533, 266425602, 53149962";
        String[] expected = expect.split(", ");
        String[] butWas = but.split(", ");
        for (int i = 0; i < actual.size(); i++) {
            System.out.println(i);
            assertEquals(actual.get(i).toString(), expected[i]);
        }
    }

    @Test
    public void testShortestPath10_1631() throws Exception {
//        end_lat=37.858582768946555, start_lon=-122.26869931025173, start_lat=37.848094416541215, end_lon=-122.28619503304964}.
        List<Long> actual = Router.shortestPath(graph,
                -122.26869931025173, 37.848094416541215,
                -122.28619503304964, 37.858582768946555);
        String expect = "53106433, 92984205, 4262478033, 53122202, 4262478034, 2808015843, 4169470694, 4262478032, 56063279, 1458166082, 53090190, 275782491, 2086720421, 53066183, 4237304240, 4483052425, 4483052417, 4237304238, 92951404, 4237304237, 4237304231, 53126429, 4237304232, 4237304235, 4237304242, 1762740345, 5060958986, 1762740344, 1762740346, 1762740348, 1762740351, 4237304243, 2422457043, 4235206813, 240469707, 53024607, 4235206811, 53024605, 687179342, 394196539, 53100729, 394196538, 4235206851, 53138574, 53047313, 4235206852, 53047311, 4235206860, 394196516, 394196515, 394196514, 73991104, 2421788570, 430994093, 73991098, 430994092, 2421788520, 430994091, 430994090, 73991090, 4235206856, 53109978, 4235206857, 2421788562, 4235206864, 53042100, 4235206867, 4235206880, 53119692, 4235206883, 4233488254, 53117372, 4233488257, 53125564, 4233488272, 53082550, 394205843, 4233488273, 57121275, 394206372, 57121266, 4233488282, 2421788530, 4233543958, 4233543984, 1745069776, 251226527, 165537287, 1745069780, 1745069779, 1745069774, 2205390314, 5035371494, 2205390318, 2205390323, 5035371493, 2205390327, 5035371492, 5035371482, 2205390331, 1745069777, 1745069778, 430995009, 430995008, 74004385, 1745072098, 53129596, 1745072100, 74004397, 394208703, 394208700, 1745072111, 53111882, 1745072113, 4233489837, 2205390391, 2205390395, 2205390398, 5061098641";
        String but = "53106433, 92984205, 4262478033, 53122202, 4262478034, 2808015843, 4169470694, 4262478032, 56063279, 1458166082, 53090190, 275782491, 2086720421, 53066183, 4237304240, 4483052425, 4483052417, 4237304238, 92951404, 4237304237, 4237304231, 53126429, 4237304232, 4237304235, 4237304242, 1762740345, 5060958986, 1762740344, 1762740346, 1762740348, 1762740351, 4237304243, 2422457043, 4235206813, 240469707, 53024607, 4235206811, 53024605, 687179342, 394196539, 53100729, 394196538, 4235206851, 53138574, 53047313, 4235206852, 53047311, 4235206860, 394196516, 394196515, 394196514, 73991104, 2421788570, 430994093, 73991098, 430994092, 2421788520, 430994091, 430994090, 73991090, 4235206856, 53109978, 4235206857, 2421788562, 4235206864, 53042100, 4235206867, 4235206880, 53119692, 4235206883, 4233488254, 53117372, 4233488257, 53125564, 4233488272, 53082550, 394205843, 4233488273, 57121275, 394206372, 57121266, 4233488282, 2421788530, 4233543958, 4233543984, 1745069776, 251226527, 165537287, 251226555, 1745069781, 2421788535, 2421788575, 4233544054, 1745072102, 53129599, 1745072099, 53129596, 1745072100, 74004397, 394208703, 394208700, 1745072111, 53111882, 1745072113, 4233489837, 2205390391, 2205390395, 2205390398, 5061098641";
        String[] expected = expect.split(", ");
        String[] butWas = but.split(", ");
        for (int i = 0; i < actual.size(); i++) {
            System.out.println(i);
            assertEquals(actual.get(i).toString(), expected[i]);
        }
    }

    @Test
    public void testShortestPath2_1505() throws Exception {
//        end_lat=37.85554113097056, start_lon=-122.27939505556448, start_lat=37.84744171358692, end_lon=-122.28511397766097
        List<Long> actual = Router.shortestPath(graph,
                -122.27939505556448, 37.84744171358692,
                -122.28511397766097, 37.85554113097056);
        String expect = "4235206792, 53126424, 4235206793, 4235206789, 53077537, 4235206790, 53024602, 53043840, 4235206838, 53077536, 4235206840, 4235206829, 4235206832, 4235206834, 4235206836, 4235206835, 4235206837, 4235206853, 4235206854, 53109978, 4235206857, 2421788562, 4235206864, 53042100, 4235206867, 4235206880, 53119692, 4235206883, 4233488254, 53117372, 4233488257, 53125564, 4233488272, 53082550, 394205843, 4233488273, 57121275, 394206372, 57121266, 4233488282, 2421788530, 4233543958, 4233543984, 1745069776, 251226527, 165537287, 251226555, 1745069781";
        String but = "4235206792, 53126424, 4235206795, 53024605, 687179342, 394196539, 53100729, 394196538, 4235206851, 53138574, 53047313, 4235206852, 53047311, 4235206860, 394196516, 394196515, 394196514, 73991104, 2421788570, 430994093, 73991098, 430994092, 2421788520, 430994091, 430994090, 73991090, 4235206856, 53109978, 4235206857, 2421788562, 4235206864, 53042100, 4235206867, 4235206880, 53119692, 4235206883, 4233488254, 53117372, 4233488257, 53125564, 4233488272, 53082550, 394205843, 4233488273, 57121275, 394206372, 57121266, 4233488282, 2421788530, 4233543958, 4233543984, 1745069776, 251226527, 165537287, 251226555, 1745069781";
        String[] expected = expect.split(", ");
        String[] butWas = but.split(", ");
        for (int i = 0; i < actual.size(); i++) {
            System.out.println(i);
            assertEquals(actual.get(i).toString(), expected[i]);
        }
    }

    @Test
    public void testPartIII() throws Exception {
        List<Long> actual = Router.shortestPath(graph,
                -122.27939505556448, 37.84744171358692,
                -122.28511397766097, 37.85554113097056);
    }

    private List<Map<String, Double>> paramsFromFile() throws Exception {
        List<String> lines = Files.readAllLines(Paths.get(PARAMS_FILE), Charset.defaultCharset());
        List<Map<String, Double>> testParams = new ArrayList<>();
        int lineIdx = 2; // ignore comment lines
        for (int i = 0; i < NUM_TESTS; i++) {
            Map<String, Double> params = new HashMap<>();
            params.put("start_lon", Double.parseDouble(lines.get(lineIdx)));
            params.put("start_lat", Double.parseDouble(lines.get(lineIdx + 1)));
            params.put("end_lon", Double.parseDouble(lines.get(lineIdx + 2)));
            params.put("end_lat", Double.parseDouble(lines.get(lineIdx + 3)));
            testParams.add(params);
            lineIdx += 4;
        }
        return testParams;
    }

    private List<List<Long>> resultsFromFile() throws Exception {
        List<String> lines = Files.readAllLines(Paths.get(RESULTS_FILE), Charset.defaultCharset());
        List<List<Long>> expected = new ArrayList<>();
        int lineIdx = 2; // ignore comment lines
        for (int i = 0; i < NUM_TESTS; i++) {
            int numVertices = Integer.parseInt(lines.get(lineIdx));
            lineIdx++;
            List<Long> path = new ArrayList<>();
            for (int j = 0; j < numVertices; j++) {
                path.add(Long.parseLong(lines.get(lineIdx)));
                lineIdx++;
            }
            expected.add(path);
        }
        return expected;
    }

    public static void main(String[] args) {
        return;
    }
}
